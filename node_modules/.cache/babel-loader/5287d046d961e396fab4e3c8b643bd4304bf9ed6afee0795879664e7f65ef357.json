{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      nombre: '',\n      primerApellido: '',\n      segundoApellido: '',\n      calle: '',\n      numero: '',\n      colonia: '',\n      codigoPostal: '',\n      telefono: '',\n      rfc: ''\n    };\n  },\n  enviarFormulario1() {\n    // Crea un objeto FormData para enviar datos del formulario\n    const formData = new FormData();\n    formData.append('imagen', this.imagen); // Agrega la imagen al FormData\n    formData.append('nombreDocumento', 'Nombre del documento'); // Agrega otros datos del formulario\n    formData.append('prospectoID', 1); // Agrega otros datos del formulario\n\n    // Realiza la solicitud POST a la API\n    fetch('http://localhost/documentos', {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Error en la solicitud');\n      }\n      alert('Documento agregado con éxito!');\n      // Limpia el formulario después de enviar\n      this.limpiarFormulario();\n      return response.json();\n    }).then(data => {\n      console.log('Respuesta de la API:', data);\n      // Aquí puedes manejar la respuesta de la API según sea necesario\n    }).catch(error => {\n      console.error('Error al enviar los datos:', error);\n    });\n  },\n  // Resto de tus métodos\n  methods: {\n    exit() {\n      const nuevoProspecto = confirm('Si sale perderá los datos sin confirmar');\n      if (nuevoProspecto) {\n        this.$router.push('/');\n      }\n    },\n    enviarFormulario() {\n      // Crear un objeto con los datos del formulario\n      const formData = {\n        nombre: this.nombre,\n        primerApellido: this.primerApellido,\n        segundoApellido: this.segundoApellido,\n        calle: this.calle,\n        numero: this.numero,\n        colonia: this.colonia,\n        codigoPostal: this.codigoPostal,\n        telefono: this.telefono,\n        rfc: this.rfc,\n        estatus: 1,\n        empleadoCreo: 2,\n        empleadoModifico: 2\n      };\n\n      // Realizar la solicitud POST a la API\n      fetch('http://localhost/prospectos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Error en la solicitud');\n          alert('¡No se puede completar la solicitud!');\n        }\n        alert('Prospecto Agregado con éxito!');\n        const nuevoProspecto = confirm('¿Desea agregar otro prospecto?');\n        if (nuevoProspecto) {\n          this.limpiarFormulario();\n        } else {\n          this.$router.push('/');\n        }\n        return response.json();\n      }).then(data => {\n        console.log('Respuesta de la API:', data);\n        // Aquí puedes manejar la respuesta de la API según sea necesario\n      }).catch(error => {\n        console.error('Error al enviar los datos:', error);\n        // Aquí puedes manejar errores de solicitud\n      });\n    },\n    limpiarFormulario() {\n      // Limpiar los campos del formulario\n      this.nombre = '';\n      this.primerApellido = '';\n      this.segundoApellido = '';\n      this.calle = '';\n      this.numero = '';\n      this.colonia = '';\n      this.codigoPostal = '';\n      this.telefono = '';\n      this.rfc = '';\n    }\n  }\n};","map":{"version":3,"names":["data","nombre","primerApellido","segundoApellido","calle","numero","colonia","codigoPostal","telefono","rfc","enviarFormulario1","formData","FormData","append","imagen","fetch","method","body","then","response","ok","Error","alert","limpiarFormulario","json","console","log","catch","error","methods","exit","nuevoProspecto","confirm","$router","push","enviarFormulario","estatus","empleadoCreo","empleadoModifico","headers","JSON","stringify"],"sources":["D:\\entrevista\\VUE\\examen-vue\\src\\components\\AgregarProspecto.vue"],"sourcesContent":["<template>\r\n          <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n          <div class=\"Derecha\">\r\n            <button @click=\"exit()\" ></button>\r\n          </div>\r\n          <div class=\"Principal\">\r\n      <h2>Formulario de Prospectos</h2>\r\n      <form @submit.prevent=\"enviarFormulario1\">\r\n        \r\n<!-- Agrega un campo de carga de archivos para la imagen -->\r\n<div class=\"input-group mb-3\">\r\n        <div class=\"input-group-prepend\">\r\n            <span class=\"input-group-text\" id=\"inputGroupFileAddon01\">Subir imagen</span>\r\n        </div>\r\n        <div class=\"custom-file\">\r\n            <input type=\"file\" class=\"custom-file-input\" id=\"inputGroupFile01\" @change=\"handleFileInputChange\">\r\n        </div>\r\n    </div>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Enviar</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        nombre: '',\r\n        primerApellido: '',\r\n        segundoApellido: '',\r\n        calle: '',\r\n        numero: '',\r\n        colonia: '',\r\n        codigoPostal: '',\r\n        telefono: '',\r\n        rfc: ''\r\n      };\r\n    },\r\n    enviarFormulario1() {\r\n        // Crea un objeto FormData para enviar datos del formulario\r\n        const formData = new FormData();\r\n        formData.append('imagen', this.imagen); // Agrega la imagen al FormData\r\n        formData.append('nombreDocumento', 'Nombre del documento'); // Agrega otros datos del formulario\r\n        formData.append('prospectoID', 1); // Agrega otros datos del formulario\r\n\r\n        // Realiza la solicitud POST a la API\r\n        fetch('http://localhost/documentos', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Error en la solicitud');\r\n            }\r\n            alert('Documento agregado con éxito!');\r\n            // Limpia el formulario después de enviar\r\n            this.limpiarFormulario();\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            console.log('Respuesta de la API:', data);\r\n            // Aquí puedes manejar la respuesta de la API según sea necesario\r\n        })\r\n        .catch(error => {\r\n            console.error('Error al enviar los datos:', error);\r\n        });\r\n    },\r\n    // Resto de tus métodos\r\n    methods: {\r\n      exit(){\r\n        const nuevoProspecto = confirm('Si sale perderá los datos sin confirmar');\r\n        if (nuevoProspecto) {\r\n          this.$router.push('/');\r\n      }\r\n      },\r\n      enviarFormulario() {\r\n        // Crear un objeto con los datos del formulario\r\n        const formData = {\r\n            nombre: this.nombre,\r\n            primerApellido: this.primerApellido,\r\n            segundoApellido: this.segundoApellido,\r\n            calle: this.calle,\r\n            numero: this.numero,\r\n            colonia: this.colonia,\r\n            codigoPostal: this.codigoPostal,\r\n            telefono: this.telefono,\r\n            rfc: this.rfc,\r\n            estatus:1,\r\n            empleadoCreo: 2,\r\n            empleadoModifico: 2\r\n        };\r\n  \r\n        // Realizar la solicitud POST a la API\r\n        fetch('http://localhost/prospectos', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(formData)\r\n        })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Error en la solicitud');\r\n            alert('¡No se puede completar la solicitud!');\r\n          }\r\n          alert('Prospecto Agregado con éxito!');\r\n          const nuevoProspecto = confirm('¿Desea agregar otro prospecto?');\r\n      if (nuevoProspecto) {\r\n        this.limpiarFormulario();\r\n      }\r\n      else{\r\n        this.$router.push('/');\r\n      }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          console.log('Respuesta de la API:', data);\r\n          // Aquí puedes manejar la respuesta de la API según sea necesario\r\n        })\r\n        .catch(error => {\r\n      console.error('Error al enviar los datos:', error);\r\n      // Aquí puedes manejar errores de solicitud\r\n    });\r\n  },\r\n  limpiarFormulario() {\r\n    // Limpiar los campos del formulario\r\n    this.nombre = '';\r\n    this.primerApellido = '';\r\n    this.segundoApellido = '';\r\n    this.calle = '';\r\n    this.numero = '';\r\n    this.colonia = '';\r\n    this.codigoPostal = '';\r\n    this.telefono = '';\r\n    this.rfc = '';\r\n  }\r\n}\r\n  };\r\n  </script>\r\n  <style>\r\n    .Principal{\r\n       width: 500px; margin: 0 auto; text-align: center;\r\n    }\r\n    .Derecha{\r\n      text-align: right;\r\n      margin-right: 2%;\r\n      margin-top: 2%;\r\n    }\r\n    .Derecha button {\r\n    /* Estilo del botón */\r\n    background-color: transparent; /* Fondo transparente para que se pueda ver la imagen */\r\n    border: none; /* Sin bordes */\r\n    width: 60px; /* Ancho del botón */\r\n    height: 60px; /* Alto del botón */\r\n    /* Ajusta el tamaño de la imagen según el tamaño del botón */\r\n    background-size: cover;\r\n    background-position: center;\r\n    /* Agrega la imagen de fondo */\r\n    background-image: url('/src/assets/Exit.png'); /* Ruta de tu imagen */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}